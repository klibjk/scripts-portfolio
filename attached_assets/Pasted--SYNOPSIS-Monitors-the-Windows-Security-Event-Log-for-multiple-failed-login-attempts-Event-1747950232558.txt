<#
.SYNOPSIS
    Monitors the Windows Security Event Log for multiple failed login attempts (Event ID 4625).
.DESCRIPTION
    This script queries the Security event log for Event ID 4625 (An account failed to log on)
    within a specified time window. If the number of failed attempts exceeds a threshold,
    it outputs an alert.
.NOTES
    Author: Your Name
    Date: $(Get-Date)
    Requires Administrator privileges to read the Security Event Log.
#>

[CmdletBinding()]
param (
    [int]$TimeWindowMinutes = 15, # Check for attempts in the last X minutes
    [int]$FailedAttemptThreshold = 5 # Alert if more than X attempts
)

Write-Host "--------------------------------------------------"
Write-Host "Failed Login Attempt Monitor (Event ID 4625) - $(Get-Date)"
Write-Host "Monitoring Security Event Log."
Write-Host "Alert threshold: $FailedAttemptThreshold failed attempts in $TimeWindowMinutes minutes."
Write-Host "--------------------------------------------------"

# --- Calculate the start time for the event log query ---
$StartTime = (Get-Date).AddMinutes(-$TimeWindowMinutes)

# --- Query the Security Event Log ---
Write-Host "Querying events since $StartTime..."
try {
    $FailedLogins = Get-WinEvent -FilterHashtable @{
        LogName   = 'Security'
        ID        = 4625 # Event ID for "An account failed to log on"
        StartTime = $StartTime
    } -ErrorAction Stop

    $FailedLoginCount = ($FailedLogins | Measure-Object).Count

    # --- Output Results ---
    Write-Host "`n--- Results for the last $TimeWindowMinutes minutes ---"
    if ($FailedLoginCount -ge $FailedAttemptThreshold) {
        Write-Warning "ALERT: $FailedLoginCount failed login attempts (Event ID 4625) detected!" # Write-Warning itself is fine

        # Display details of the failed logins
        Write-Host "Details of failed attempts:"
        $FailedLogins | Select-Object -First 10 TimeCreated, `
            @{Name='TargetUserName';Expression={$_.Properties[5].Value}}, `
            @{Name='WorkstationName';Expression={$_.Properties[11].Value}}, `
            @{Name='SourceNetworkAddress';Expression={$_.Properties[19].Value}}, `
            @{Name='LogonType';Expression={$_.Properties[8].Value}}, `
            @{Name='Status';Expression={$_.Properties[6].Value}} | Format-Table -AutoSize

        Write-Host "Consider investigating these attempts."
    } else {
        Write-Host "OK: No significant failed login activity detected (found $FailedLoginCount attempts)."
    }

} catch {
    Write-Error "Error querying the Security Event Log: $($_.Exception.Message)"
    Write-Host "Please ensure you are running this script with Administrator privileges."
}

Write-Host "`n--------------------------------------------------"
Write-Host "Monitoring Complete."
Write-Host "--------------------------------------------------"